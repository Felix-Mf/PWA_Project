@page "/answer/{QuestionId:int}"
@attribute [Authorize(Roles = "Admin")]

@using PWA_Project.Shared
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (Answers != null)
{
    <MudTable OnRowClick="@OnRowClick" T="Answer" Items="@Answers" Hover="true" Filter="new Func<Answer, bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Answers</MudText>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Text</MudTh>
            <MudTh>Correct</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Text">@context.Text</MudTd>
            <MudTd DataLabel="Correct">
                <MudSwitch @bind-Checked="@context.Correct" Color="Color.Primary" Disabled="true" />
            </MudTd>
            <MudTd DataLabel="Delete"><MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteAnswer(context))"></MudIconButton></MudTd>
        </RowTemplate>
    </MudTable>
    <br />
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@AddAnswer" />
}
else if (notFound)
{
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@AddAnswer" />
}
else if (noConnection)
{
    <p>You need a connection to the server to access this resource.</p>
    <br />
    <p>If you are already connected to the server and read this, you are not authorized to access this resource.</p>
    <br />
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.ElectricalServices" Color="Color.Warning" OnClick="@(() => GoToLogin())">Try to connect to the server</MudButton>    
}
else
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7 top-loader" />
}

<br />
<span style="color:red;">@ErrorMessage</span>

@code
{
    [Parameter]
    public int QuestionId { get; set; }

    private List<Answer> Answers;
    private Answer cAnswer;
    private string SearchName = "";
    private string ErrorMessage = "";
    private string searchString = "";
    private bool notFound;
    private bool noConnection;

    protected override async Task OnInitializedAsync()
    {
        await GetAnswers();
    }

    private async Task GetAnswers()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Answer[]>($"api/Answer/GetAll/{QuestionId}");

            if (result != null)
            {
                Answers = result.ToList<Answer>();
            }
        }
        catch (Exception)
        {
            noConnection = true;
        }
    }

    private async Task AddAnswer()
    {
        if(Answers.Count() == 3)
        {
            Snackbar.Add("There are max. 3 answers allowed per question.", Severity.Error);
        }
        else
        {
            var parameters = new DialogParameters();
            parameters.Add("answer", null);
            parameters.Add("action", "Add");
            parameters.Add("question", QuestionId);

            var dialog = DialogService.Show<AnswerPopup>("Add Answer", parameters);
            var result = await dialog.Result;

            if (!result.Cancelled)
            {
                await GetAnswers();
            }
        }
    }

    private async Task DeleteAnswer(Answer tAnswer)
    {
        var parameters = new DialogParameters();
        parameters.Add("answer", tAnswer);
        parameters.Add("action", "Delete");
        parameters.Add("question", QuestionId);

        var dialog = DialogService.Show<AnswerPopup>("Delete Answer", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await GetAnswers();
        }
    }

    private async Task OnRowClick(TableRowClickEventArgs<Answer> tAnswer)
    {
        var parameters = new DialogParameters();
        parameters.Add("answer", tAnswer.Item);
        parameters.Add("action", "Update");
        parameters.Add("question", QuestionId);

        var dialog = DialogService.Show<AnswerPopup>("Update Answer", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await GetAnswers();
        }
    }

    private bool FilterFunc(Answer element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Text.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Id}".Contains(searchString))
            return true;
        return false;
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("authentication/login");
    }
}
