@page "/course"
@attribute [Authorize(Roles = "Admin")]

@using PWA_Project.Shared
@using System.Net.Http
@inject HttpClient Http
@inject NavigationManager NavigationManager
@inject IDialogService DialogService
@inject ISnackbar Snackbar

@if (Courses != null)
{
    <MudTable OnRowClick="@OnRowClick" T="Course" Items="@Courses" Hover="true" Filter="new Func<Course, bool>(FilterFunc)">
        <ToolBarContent>
            <MudText Typo="Typo.h6">Courses</MudText>
            <MudToolBarSpacer />
            <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        </ToolBarContent>
        <HeaderContent>
            <MudTh>Id</MudTh>
            <MudTh>Titel</MudTh>
            <MudTh>Description</MudTh>
            <MudTh></MudTh>
        </HeaderContent>
        <RowTemplate>
            <MudTd DataLabel="Id">@context.Id</MudTd>
            <MudTd DataLabel="Titel">@context.Titel</MudTd>
            <MudTd DataLabel="Description">@context.Description</MudTd>
            <MudTd DataLabel="Delete"><MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteCourse(context))"></MudIconButton></MudTd>
        </RowTemplate>
    </MudTable>
    <br />
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@AddCourse" />
}
else if (notFound)
{
    <MudFab Color="Color.Primary" Icon="@Icons.Material.Filled.Add" OnClick="@AddCourse" />
}
else if (noConnection)
{
    <p>You need a connection to the server to access this resource.</p>
    <br />
    <p>If you are already connected to the server and read this, you are not authorized to access this resource.</p>
    <br />
    <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Outlined.ElectricalServices" Color="Color.Warning" OnClick="@(() => GoToLogin())">Try to connect to the server</MudButton>    
}
else
{
    <MudProgressLinear Color="Color.Primary" Indeterminate="true" Class="my-7 top-loader" />
}

<br />
<span style="color:red;">@ErrorMessage</span>

@code
{
    private List<Course> Courses;
    private Course cCourse;
    private string SearchName = "";
    private string ErrorMessage = "";
    private string searchString = "";
    private bool notFound;
    private bool noConnection;

    protected override async Task OnInitializedAsync()
    {
        await GetCourses();
    }

    private async Task GetCourses()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Course[]>("api/Course/GetAll");

            if (result != null)
            {
                Courses = result.ToList<Course>();
            }

            notFound = (Courses == null);
        }
        catch (Exception)
        {
            noConnection = true;
        }
    }

    private async Task AddCourse()
    {
        var parameters = new DialogParameters();
        parameters.Add("course", null);
        parameters.Add("action", "Add");

        var dialog = DialogService.Show<CoursePopup>("Add Course", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await GetCourses();
        }
    }

    private async Task DeleteCourse(Course tCourse)
    {
        var parameters = new DialogParameters();
        parameters.Add("course", tCourse);
        parameters.Add("action", "Delete");

        var dialog = DialogService.Show<CoursePopup>("Delete Course", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await GetCourses();
        }
    }

    private async Task OnRowClick(TableRowClickEventArgs<Course> tCourse)
    {
        var parameters = new DialogParameters();
        parameters.Add("course", tCourse.Item);
        parameters.Add("action", "Update");

        var dialog = DialogService.Show<CoursePopup>("Update Course", parameters);
        var result = await dialog.Result;

        if (!result.Cancelled)
        {
            await GetCourses();
        }
    }

    private bool FilterFunc(Course element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Titel.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Description.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if ($"{element.Id}".Contains(searchString))
            return true;
        return false;
    }

    private void GoToLogin()
    {
        NavigationManager.NavigateTo("authentication/login");
    }
}
