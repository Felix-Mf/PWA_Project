@using System.Net.Http
@inject HttpClient Http
@inject ISnackbar Snackbar

@if (action == "Delete" || action == "Update")
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@popupIcon" Class="mr-3 mb-n1" />
                @popupTitel
            </MudText>
        </TitleContent>
        <DialogContent>
            <div class="content-block popup-content-block" style=" ">
                <div class="row ml-0 mr-0 " style="min-height: 100%;">
                    <div class="col-lg-12 col-md-12 col-sm-12 c-border-left-blue ">
                        <div class="row pb-4  ">
                            <div class="col-12 text-left page-header-title">
                                <i class="bi-camera bg-blue"></i>
                                <MudItem xs="12" sm="12" md="12">
                                    <MudTextField @bind-Value="@answer.Id" Label="Id" Variant="Variant.Text" Margin="Margin.Dense" Disabled="true"></MudTextField>
                                </MudItem>
                            </div>
                        </div>
                        <div class="row pb-4  ">
                            <div class="col-12 text-left page-header-title">
                                <i class="bi-camera bg-blue"></i>
                                <MudItem xs="12" sm="12" md="12">
                                    <MudTextField @bind-Value="@answer.Text" Label="Text" Variant="Variant.Text" Margin="Margin.None" Disabled="@disabled"></MudTextField>
                                </MudItem>
                            </div>
                        </div>
                        <div class="row pb-4  ">
                            <div class="col-12 text-left page-header-title">
                                <i class="bi-camera bg-blue"></i>
                                <MudItem xs="12" sm="12" md="12">
                                    <MudText Typo="@Typo.caption">Correct</MudText>
                                    <MudSwitch @bind-Checked="@answer.Correct" Color="Color.Primary" Disabled="@disabled" />
                                </MudItem>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Error" OnClick="Finish">@action</MudButton>
        </DialogActions>
    </MudDialog>
}
else
{
    <MudDialog>
        <TitleContent>
            <MudText Typo="Typo.h6">
                <MudIcon Icon="@popupIcon" Class="mr-3 mb-n1" />
                @popupTitel
            </MudText>
        </TitleContent>
        <DialogContent>
            <MudItem xs="12" sm="12" md="12">
                <MudTextField @bind-Value="@answer.Id" Label="Id" Variant="Variant.Text" Margin="Margin.Normal" Disabled="true"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="12" md="12">
                <MudTextField @bind-Value="@answer.Text" Label="Text" Variant="Variant.Text" Margin="Margin.Normal" Disabled="@disabled"></MudTextField>
            </MudItem>
            <MudItem xs="12" sm="12" md="12">
                <MudText Typo="@Typo.caption">Correct</MudText>
                <MudSwitch @bind-Checked="@answer.Correct" Color="Color.Primary" Disabled="@disabled" />
            </MudItem>
        </DialogContent>
        <DialogActions>
            <MudButton OnClick="Cancel">Cancel</MudButton>
            <MudButton Color="Color.Info" OnClick="Finish">Add</MudButton>
        </DialogActions>
    </MudDialog>
}

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Answer answer { get; set; } = new Answer();

    [Parameter]
    public string action { get; set; }

    [Parameter]
    public int question { get; set; }

    private string popupIcon = "";
    private string popupTitel = "";
    private bool disabled = true;

    protected override void OnInitialized()
    {
        if (action == "Add")
        {
            answer = new Answer
            {
                Id = 0,
                Text = "",
                Correct = false,
                QuestionId = question
            };

            popupIcon = Icons.Material.Filled.AddBox;
            popupTitel = "Add Answer?";
            disabled = false;
        }
        else if (action == "Delete")
        {
            popupIcon = Icons.Material.Filled.DeleteForever;
            popupTitel = "Delete Answer?";
            disabled = true;
        }
        else if (action == "Update")
        {
            popupIcon = Icons.Material.Filled.Autorenew;
            popupTitel = "Update Answer?";
            disabled = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Finish()
    {
        if (action == "Add")
        {
            await Add();
        }
        else if (action == "Delete")
        {
            await Delete();
        }
        else if (action == "Update")
        {
            await Update();
        }
    }

    private async Task Add()
    {
        try
        {
            var result = await Http.PostAsJsonAsync("api/Answer/Insert/", answer);

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add("Added", Severity.Success);
                MudDialog.Close(DialogResult.Ok(answer.Id));
            }
            else
            {
                Snackbar.Add("Not Added", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task Delete()
    {
        try
        {
            var result = await Http.DeleteAsync("api/Answer/Delete/" + Convert.ToInt32(answer.Id));

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add("Deleted", Severity.Success);
                MudDialog.Close(DialogResult.Ok(answer.Id));
            }
            else
            {
                Snackbar.Add("Not Deleted", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task Update()
    {
        try
        {
            var result = await Http.PutAsJsonAsync("api/Answer/Update/", answer);

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add("Updated", Severity.Success);
                MudDialog.Close(DialogResult.Ok(answer.Id));
            }
            else
            {
                Snackbar.Add("Not Updated", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
}
