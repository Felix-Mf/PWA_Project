@using System.Net.Http
@inject HttpClient Http
@inject ISnackbar Snackbar

@if (Tests != null)
{
    @if (action == "Delete" || action == "Update")
    {
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@popupIcon" Class="mr-3 mb-n1" />
                    @popupTitel
                </MudText>
            </TitleContent>
            <DialogContent>
                <div class="content-block popup-content-block" style=" ">
                    <div class="row ml-0 mr-0 " style="min-height: 100%;">
                        <div class="col-lg-12 col-md-12 col-sm-12 c-border-left-blue ">
                            <div class="row pb-4  ">
                                <div class="col-12 text-left page-header-title">
                                    <i class="bi-camera bg-blue"></i>
                                    <MudItem xs="12" sm="12" md="12">
                                        <MudTextField @bind-Value="@question.Id" Label="Id" Variant="Variant.Text" Margin="Margin.Dense" Disabled="true"></MudTextField>
                                    </MudItem>
                                </div>
                            </div>
                            <div class="row pb-4  ">
                                <div class="col-12 text-left page-header-title">
                                    <i class="bi-camera bg-blue"></i>
                                    <MudItem xs="12" sm="12" md="12">
                                        <MudTextField @bind-Value="@question.Text" Label="Text" Variant="Variant.Text" Margin="Margin.None" Disabled="@disabled"></MudTextField>
                                    </MudItem>
                                </div>
                            </div>
                            <div class="row pb-4  ">
                                <div class="col-12 text-left page-header-title">
                                    <i class="bi-camera bg-blue"></i>
                                    <MudItem xs="12" md="12" sm="12">
                                        <MudSelect T="int" @bind-Value="@question.TestId" Label="Test" Margin="Margin.Normal" Disabled="@disabled" Variant="Variant.Text" Direction="Direction.Bottom" Dense="true" OffsetY="true">
                                            @foreach (Test t in Tests)
                                            {
                                                <MudSelectItem Value="@(t.Id)">@t.Titel</MudSelectItem>
                                            }
                                        </MudSelect>
                                    </MudItem>
                                </div>
                            </div>
                        </div>
                        <div class="col-lg-12 col-md-12 col-sm-12" style="padding-right: 24px; padding-left: 17px;">
                            <div class="row pb-4  ">
                                <div class="col-8 text-left page-header-title">
                                    <i class="bi-patch-question bg-blue"></i>
                                    <h5 class="p-0 m-0">Question Information</h5>
                                </div>
                            </div>
                            <div class="row pb-4 ">
                                <div id="accordion" class="w-100 question-collapse">
                                    <div class="card c-border-left-blue">
                                        <div class="card-header " id="headingOne">
                                            <h5 class="mb-0">
                                                <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                                    Answers
                                                </button>
                                            </h5>
                                        </div>
                                        <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
                                            <div class="card-body c-border-left-blue p-4">
                                                @if (question.Answer.Count() > 0)
                                                {
                                                    <MudTable T="Answer" Items="@question.Answer" Hover="true">
                                                        <ToolBarContent>
                                                            <MudText Typo="Typo.h6">Questions</MudText>
                                                            <MudToolBarSpacer />
                                                        </ToolBarContent>
                                                        <HeaderContent>
                                                            <MudTh>Id</MudTh>
                                                            <MudTh>Text</MudTh>
                                                            <MudTh>Correct</MudTh>
                                                        </HeaderContent>
                                                        <RowTemplate>
                                                            <MudTd DataLabel="Id">@context.Id</MudTd>
                                                            <MudTd DataLabel="Text">@context.Text</MudTd>
                                                            <MudTd DataLabel="Correct">@context.Correct</MudTd>
                                                        </RowTemplate>
                                                    </MudTable>
                                                }
                                                else
                                                {
                                                    <p>No Answers</p>
                                                }
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Error" OnClick="Finish">@action</MudButton>
            </DialogActions>
        </MudDialog>
    }
    else
    {
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@popupIcon" Class="mr-3 mb-n1" />
                    @popupTitel
                </MudText>
            </TitleContent>
            <DialogContent>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField @bind-Value="@question.Id" Label="Id" Variant="Variant.Text" Margin="Margin.Normal" Disabled="true"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField @bind-Value="@question.Text" Label="Text" Variant="Variant.Text" Margin="Margin.Normal" Disabled="@disabled"></MudTextField>
                </MudItem>
                <br />
                <MudItem xs="12" sm="12" md="12">
                    <MudText Typo="@Typo.caption">Image</MudText>
                    <br />
                    <InputFile id="fileInput" OnChange="UploadFiles" hidden accept=".jpg, .jpeg, .png" />
                    <MudButton HtmlTag="label" Disabled="@uploadDisabled"
                               Variant="Variant.Filled"
                               Color="Color.Primary"
                               StartIcon="@Icons.Filled.CloudUpload"
                               for="fileInput">
                        Upload image
                    </MudButton>
                    <br />
                    @if (files != null)
                    {
                        <MudText Typo="@Typo.body2">@fileData.Count() File@(fileData.Count() == 1 ? "" : "s"):</MudText>
                        <MudList>
                            @foreach (var file in fileData)
                            {
                                <MudListItem Icon="@Icons.Filled.AttachFile" @key="@file">
                                    <MudText Typo="@Typo.body2">
                                        @file.Name <code>@file.Size bytes</code>
                                    </MudText>
                                </MudListItem>
                                <br />
                                <div class="col-12 text-center">
                                    <MudIconButton Icon="@Icons.Material.Filled.Delete" OnClick="@(() => DeleteImage())"></MudIconButton>
                                </div>
                            }
                        </MudList>
                    }
                </MudItem>
                <MudItem xs="12" md="12" sm="12">
                    <MudSelect T="int" @bind-Value="@question.TestId" Label="Test" Variant="Variant.Text" Direction="Direction.Bottom" Dense="true" OffsetY="true">
                        @foreach (Test t in Tests)
                        {
                            <MudSelectItem Value="@(t.Id)">@t.Titel</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Info" OnClick="Finish">Add</MudButton>
            </DialogActions>
        </MudDialog>
    }
}

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Question question { get; set; } = new Question();

    [Parameter]
    public string action { get; set; }

    private string popupIcon = "";
    private string popupTitel = "";
    private bool disabled = true;

    private List<Test> Tests;

    private IList<IBrowserFile> files = new List<IBrowserFile>();
    private List<FileData> fileData = new List<FileData>();
    private string imgUrl = string.Empty;
    private long maxFileSize = 2000000;
    private bool uploadDisabled = true;

    protected override async Task OnInitializedAsync()
    {
        await GetTests();

        if (action == "Add")
        {
            question = new Question
            {
                Id = 0,
                Text = "",
                ImagePath = "",
                VideoPath = "",
            };

            popupIcon = Icons.Material.Filled.Add;
            popupTitel = "Add Question?";
            disabled = false;
        }
        else if (action == "Delete")
        {
            popupIcon = Icons.Material.Filled.DeleteForever;
            popupTitel = "Delete Question?";
            disabled = true;
        }
        else if (action == "Update")
        {
            popupIcon = Icons.Material.Filled.Update;
            popupTitel = "Update Question?";
            disabled = false;
        }

        if (files.Count() > 0)
        {
            uploadDisabled = true;
        }
        else
        {
            uploadDisabled = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Finish()
    {
        if (action == "Add")
        {
            await Add();
        }
        else if (action == "Delete")
        {
            await Delete();
        }
        else if (action == "Update")
        {
            await Update();
        }
    }

    private async Task Add()
    {
        try
        {
            var result = await Http.PostAsJsonAsync("api/Question/Insert/", question);

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                await SaveToServer();
                Snackbar.Add("Added", Severity.Success);
                MudDialog.Close(DialogResult.Ok(question.Id));
            }
            else
            {
                Snackbar.Add("Not Added", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task Delete()
    {
        try
        {
            var result = await Http.DeleteAsync("api/Question/Delete/" + Convert.ToInt32(question.Id));

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add("Deleted", Severity.Success);
                MudDialog.Close(DialogResult.Ok(question.Id));
            }
            else
            {
                Snackbar.Add("Not Deleted", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task Update()
    {
        try
        {
            var result = await Http.PutAsJsonAsync("api/Question/Update/", question);

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add("Updated", Severity.Success);
                MudDialog.Close(DialogResult.Ok(question.Id));
            }
            else
            {
                Snackbar.Add("Not Updated", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task GetTests()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Test[]>("api/Test/GetAll");

            if (result != null)
            {
                Tests = result.ToList<Test>();
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task UploadFiles(InputFileChangeEventArgs e)
    {
        if (e.File.Size > maxFileSize)
        {
            Snackbar.Add("File Size is too large, max. 2MB", Severity.Error);
            return;
        }

        uploadDisabled = true;

        IBrowserFile imgFile = e.File;
        string fileName = imgFile.Name;
        var buffers = new byte[imgFile.Size];
        await imgFile.OpenReadStream(maxFileSize).ReadAsync(buffers);
        string imageType = imgFile.ContentType;
        imgUrl = $"data:{imageType};base64,{Convert.ToBase64String(buffers)}";

        fileData.Add(new FileData
        {
            Name = fileName,
            Data = buffers,
            FileType = imageType,
            Size = imgFile.Size
        });
    }

    private async Task SaveToServer()
    {
        if (fileData.Count > 0)
        {
            var payload = new SaveFile { Files = fileData };
            var result = await Http.PostAsJsonAsync("/api/Fileupload/SaveToPhysicalLocation", payload);

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add("Image Upload successful", Severity.Success);
            }
            else
            {
                Snackbar.Add("Image Upload failed", Severity.Error);
            }
        }
    }

    private void DeleteImage()
    {
        fileData.Clear();
        uploadDisabled = false;
    }
}
