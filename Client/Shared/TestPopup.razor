@using System.Net.Http
@inject HttpClient Http
@inject ISnackbar Snackbar

@if (Courses != null)
{
    @if (action == "Delete" || action == "Update")
    {
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@popupIcon" Class="mr-3 mb-n1" />
                    @popupTitel
                </MudText>
            </TitleContent>
            <DialogContent>
                <MudContainer Style="max-height: 80vh; overflow-y: scroll">
                    <div class="content-block popup-content-block">
                        <div class="row ml-0 mr-0 " style="min-height: 100%;">
                            <div class="col-lg-12 col-md-12 col-sm-12 c-border-left-blue ">
                                <div class="row pb-4">
                                    <div class="col-12 text-left page-header-title">
                                        <i class="bi-camera bg-blue"></i>
                                        <MudItem xs="12" sm="12" md="12">
                                            <MudTextField @bind-Value="@test.Id" Label="Id" Variant="Variant.Text" Margin="Margin.Dense" Disabled="true"></MudTextField>
                                        </MudItem>
                                    </div>
                                </div>
                                <div class="row pb-4">
                                    <div class="col-12 text-left page-header-title">
                                        <i class="bi-camera bg-blue"></i>
                                        <MudItem xs="12" sm="12" md="12">
                                            <MudTextField @bind-Value="@test.Titel" Label="Titel" Variant="Variant.Text" Margin="Margin.None" Disabled="@disabled"></MudTextField>
                                        </MudItem>
                                    </div>
                                </div>
                                <div class="row pb-4">
                                    <div class="col-12 text-left page-header-title">
                                        <i class="bi-camera bg-blue"></i>
                                        <MudItem xs="12" sm="12" md="12">
                                            <MudTextField @bind-Value="@test.Description" Label="Description" Variant="Variant.Text" Margin="Margin.Normal" Disabled="@disabled"></MudTextField>
                                        </MudItem>
                                    </div>
                                </div>
                                <div class="row pb-4">
                                    <div class="col-12 text-left page-header-title">
                                        <i class="bi-camera bg-blue"></i>
                                        <MudItem xs="12" sm="12" md="12">
                                            <MudDatePicker @bind-Date="@test.Date_min" Label="Start Date" DateFormat="dd/MM/yyyy" Margin="Margin.Normal" Disabled="@disabled" />
                                        </MudItem>
                                    </div>
                                </div>
                                <div class="row pb-4">
                                    <div class="col-12 text-left page-header-title">
                                        <i class="bi-camera bg-blue"></i>
                                        <MudItem xs="12" sm="12" md="12">
                                            <MudDatePicker @bind-Date="@test.Date_max" Label="End Date" DateFormat="dd/MM/yyyy" Margin="Margin.Normal" Disabled="@disabled" />
                                        </MudItem>
                                    </div>
                                </div>
                                <div class="row pb-4">
                                    <div class="col-12 text-left page-header-title">
                                        <i class="bi-camera bg-blue"></i>
                                        <MudItem xs="12" md="12" sm="12">
                                            <MudSelect T="int" @bind-Value="@test.CourseId" Label="Course" Margin="Margin.Normal" Disabled="@disabled" Variant="Variant.Text" Direction="Direction.Bottom" Dense="true" OffsetY="true">
                                                @foreach (Course c in Courses)
                                                {
                                                    <MudSelectItem Value="@(c.Id)">@c.Titel</MudSelectItem>
                                                }
                                            </MudSelect>
                                        </MudItem>
                                    </div>
                                </div>
                            </div>
                            <div class="col-lg-12 col-md-12 col-sm-12" style="padding-right: 24px; padding-left: 17px;">
                                <div class="row pb-4">
                                    <div class="col-8 text-left page-header-title">
                                        <i class="bi-patch-question bg-blue"></i>
                                        <h5 class="p-0 m-0">Test Information</h5>
                                    </div>
                                </div>
                                <div class="row pb-4 ">
                                    <div id="accordion" class="w-100 question-collapse">
                                        <div class="card c-border-left-blue">
                                            <div class="card-header " id="headingOne">
                                                <h5 class="mb-0">
                                                    <button class="btn btn-link" data-toggle="collapse" data-target="#collapseOne" aria-expanded="true" aria-controls="collapseOne">
                                                        Questions
                                                    </button>
                                                </h5>
                                            </div>
                                            <div id="collapseOne" class="collapse show" aria-labelledby="headingOne" data-parent="#accordion">
                                                <div class="card-body c-border-left-blue p-4">
                                                    @if (test.Question.Count() > 0)
                                                    {
                                                        <MudTable T="Question" Items="@test.Question" Hover="true">
                                                            <ToolBarContent>
                                                                <MudText Typo="Typo.h6">Questions</MudText>
                                                                <MudToolBarSpacer />
                                                            </ToolBarContent>
                                                            <HeaderContent>
                                                                <MudTh>Id</MudTh>
                                                                <MudTh>Text</MudTh>
                                                            </HeaderContent>
                                                            <RowTemplate>
                                                                <MudTd DataLabel="Id">@context.Id</MudTd>
                                                                <MudTd DataLabel="Titel">@context.Text</MudTd>
                                                            </RowTemplate>
                                                        </MudTable>
                                                    }
                                                    else
                                                    {
                                                        <p>No Questions</p>
                                                    }
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </MudContainer>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Error" OnClick="Finish">@action</MudButton>
            </DialogActions>
        </MudDialog>
    }
    else
    {
        <MudDialog>
            <TitleContent>
                <MudText Typo="Typo.h6">
                    <MudIcon Icon="@popupIcon" Class="mr-3 mb-n1" />
                    @popupTitel
                </MudText>
            </TitleContent>
            <DialogContent>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField @bind-Value="@test.Id" Label="Id" Variant="Variant.Text" Margin="Margin.Normal" Disabled="true"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField @bind-Value="@test.Titel" Label="Titel" Variant="Variant.Text" Margin="Margin.Normal" Disabled="@disabled"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudTextField @bind-Value="@test.Description" Label="Description" Variant="Variant.Text" Margin="Margin.Normal" Disabled="@disabled"></MudTextField>
                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudDatePicker @bind-Date="@test.Date_min" Label="Start Date" DateFormat="dd/MM/yyyy" Margin="Margin.Normal" Disabled="@disabled" />
                </MudItem>
                <MudItem xs="12" sm="12" md="12">
                    <MudDatePicker @bind-Date="@test.Date_max" Label="End Date" DateFormat="dd/MM/yyyy" Margin="Margin.Normal" Disabled="@disabled" />
                </MudItem>
                <MudItem xs="12" md="12" sm="12">
                    <MudSelect T="int" @bind-Value="@test.CourseId" Label="Course" Variant="Variant.Text" Direction="Direction.Bottom" Dense="true" OffsetY="true">
                        @foreach (Course c in Courses)
                        {
                            <MudSelectItem Value="@(c.Id)">@c.Titel</MudSelectItem>
                        }
                    </MudSelect>
                </MudItem>
            </DialogContent>
            <DialogActions>
                <MudButton OnClick="Cancel">Cancel</MudButton>
                <MudButton Color="Color.Info" OnClick="Finish">Add</MudButton>
            </DialogActions>
        </MudDialog>
    }
}

@code {
    [CascadingParameter]
    MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public Test test { get; set; } = new Test();

    [Parameter]
    public string action { get; set; }

    private string popupIcon = "";
    private string popupTitel = "";
    private bool disabled = true;

    private List<Course> Courses;

    protected override async Task OnInitializedAsync()
    {
        await GetCourses();

        if (action == "Add")
        {
            test = new Test
            {
                Id = 0,
                Titel = "",
                Description = "",
                Date_min = null,
                Date_max = null
            };

            popupIcon = Icons.Material.Filled.Add;
            popupTitel = "Add Test?";
            disabled = false;
        }
        else if (action == "Delete")
        {
            popupIcon = Icons.Material.Filled.DeleteForever;
            popupTitel = "Delete Test?";
            disabled = true;
        }
        else if (action == "Update")
        {
            popupIcon = Icons.Material.Filled.Update;
            popupTitel = "Update Test?";
            disabled = false;
        }
    }

    private void Cancel()
    {
        MudDialog.Cancel();
    }

    private async Task Finish()
    {
        if (action == "Add")
        {
            await Add();
        }
        else if (action == "Delete")
        {
            await Delete();
        }
        else if (action == "Update")
        {
            await Update();
        }
    }

    private async Task Add()
    {
        try
        {
            var result = await Http.PostAsJsonAsync("api/Test/Insert/", test);

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add("Added", Severity.Success);
                MudDialog.Close(DialogResult.Ok(test.Id));
            }
            else
            {
                Snackbar.Add("Not Added", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task Delete()
    {
        try
        {
            var result = await Http.DeleteAsync("api/Test/Delete/" + Convert.ToInt32(test.Id));

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add("Deleted", Severity.Success);
                MudDialog.Close(DialogResult.Ok(test.Id));
            }
            else
            {
                Snackbar.Add("Not Deleted", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task Update()
    {
        try
        {
            var result = await Http.PutAsJsonAsync("api/Test/Update/", test);

            if (result.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Snackbar.Add("Updated", Severity.Success);
                MudDialog.Close(DialogResult.Ok(test.Id));
            }
            else
            {
                Snackbar.Add("Not Updated", Severity.Error);
                MudDialog.Close(DialogResult.Cancel());
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }

    private async Task GetCourses()
    {
        try
        {
            var result = await Http.GetFromJsonAsync<Course[]>("api/Course/GetAll");

            if (result != null)
            {
                Courses = result.ToList<Course>();
            }
        }
        catch (Exception ex)
        {
            throw ex;
        }
    }
}
